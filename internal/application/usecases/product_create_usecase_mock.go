// Code generated by mockery v2.40.1. DO NOT EDIT.

package usecases

import (
	mock "github.com/stretchr/testify/mock"
)

// IProductCreateUseCase is an autogenerated mock type for the IProductCreateUseCase type
type IProductCreateUseCaseMock struct {
	mock.Mock
}

// Execute provides a mock function with given fields: productCreateInput
func (_m *IProductCreateUseCaseMock) Execute(productCreateInput ProductCreateInput) (ProductCreateOutput, error) {
	ret := _m.Called(productCreateInput)

	if len(ret) == 0 {
		panic("no return value specified for Execute")
	}

	var r0 ProductCreateOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(ProductCreateInput) (ProductCreateOutput, error)); ok {
		return rf(productCreateInput)
	}
	if rf, ok := ret.Get(0).(func(ProductCreateInput) ProductCreateOutput); ok {
		r0 = rf(productCreateInput)
	} else {
		r0 = ret.Get(0).(ProductCreateOutput)
	}

	if rf, ok := ret.Get(1).(func(ProductCreateInput) error); ok {
		r1 = rf(productCreateInput)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewIProductCreateUseCase creates a new instance of IProductCreateUseCase. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewIProductCreateUseCaseMock(t interface {
	mock.TestingT
	Cleanup(func())
}) *IProductCreateUseCaseMock {
	mock := &IProductCreateUseCaseMock{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
